---
heat_template_version: 2016-04-08

description: OpenShift cluster

parameters:

  subnet_cidr:
    type: string
    description: CIDR of the subnetwork to place cluster
    default: 192.168.99.0/24

  dns_nameservers:
    type: comma_delimited_list
    description: Addresses of a dns nameserver reachable in your environment

  router_name:
    type: string
    description: >
      Name of the Router to which AppCluster subnet will be attached to
    constraints:
    - custom_constraint: neutron.router

  cluster_id:
    type: string
    description: >
      Cluster name (used in resource names)
    default: openshift

  cluster_public_dns_domain:
    type: string
    description: >
      Public DNS domain, in which cluster is located
    default: example.com

  cluster_full_dns_domain:
    type: string
    description: >
      Full public DNS domain, in which cluster is located
    default: openshift.example.com

  image_name:
    type: string
    description: Image name for the cluster node
    # default: Fedora-Atomic-27-20180326

  node_flavor:
    type: string
    default: s2.large.4

  master_flavor:
    type: string
    default: s2.xlarge.4

  infra_flavor:
    type: string
    default: s2.xlarge.2

  ssh_key_name:
    type: string
    description: Name of the SSH keypair registered with Nova
    constraints:
    - custom_constraint: nova.keypair

  ssh_user:
    type: string
    label: ssh_user
    description: Name of the SSH user to be used for connection (to be saved as server metadata)

  availability_zones:
    type: comma_delimited_list
    label: availability_zones
    description: List of AZs to spread instances across
    {% set zone_cycler = cycler( *availability_zones ) %}
default: [{% for n in range(1, 20+1) %}"{{ zone_cycler.next() }}"{% if not loop.last %}{{','}} {% endif %}{% endfor %}]

  volume_size_host:
    type: number
    description: Sys storage size of each node
    default: 6

  volume_size_local:
    type: number
    description: Volume size for the local Pod storage
    default: 10

  volume_size_docker:
    type: number
    description: Volume size for the local docker images storage
    default: 10

  volume_size_etcd:
    type: number
    description: Volume size for the local etcd storage
    default: 10

  volume_size_registry:
    type: number
    description: Volume size for the docker registry storage
    default: 10

  lb_name:
    type: string
    description: name of the LoadBalancer
    default: app-cluster-lb

  count_master:
    type: number
    default: 0
  count_compute:
    type: number
    default: 0
  count_etcd:
    type: number
    default: 0
  count_infra:
    type: number
    default: 0
  count_cns:
    type: number
    default: 0


resources:

  network:
    type: network.yaml
    properties:
      dns_nameservers: { get_param: dns_nameservers }
      service_router: { get_param: router_name }
      service_subnet_cidr: { get_param: subnet_cidr }

  sg:
    type: sec_grp.yaml
    properties:
      cluster_name: {{ stack_name }}

  #######
  # - server groups
  #######
{% if master_server_group_policies|length > 0 %}
  master_server_group:
    type: OS::Nova::ServerGroup
    properties:
      name: master_server_group
      policies: {{ master_server_group_policies | to_yaml}}
{% endif %}
{% if infra_server_group_policies|length > 0 %}
  infra_server_group:
    type: OS::Nova::ServerGroup
    properties:
      name: infra_server_group
      policies: {{ infra_server_group_policies | to_yaml }}
{% endif %}

  #######
  # - master nodes (with etcd on top)
  #######
  masters:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: count_master }
      resource_def:
        type: server-master.yaml
        properties:
          name:
            str_replace:
              template: k8s_type-%index%.internal.cluster_id
              params:
                cluster_id: { get_param: cluster_full_dns_domain }
                k8s_type: master
          cluster_env: { get_param: cluster_public_dns_domain }
          cluster_id:  {{ stack_name }}
          group:
            str_replace:
              template: k8s_type.cluster_id
              params:
                k8s_type: masters
                cluster_id: {{ stack_name }}
          type:        master
          image:       { get_param: image_name }
          flavor:      { get_param: master_flavor }
          key_name:    { get_param: ssh_key_name }
          ssh_user:    { get_param: ssh_user }
          availability_zones: { get_param: availability_zones }
          index: "%index%"
          net:         { get_attr: [network, service_network] }
          subnet:      { get_attr: [network, service_subnet] }
          net_name:    { get_attr: [network, service_network_name] }
          secgrp:
            - { get_attr: [sg, common-secgrp] }
            - { get_attr: [sg, master-secgrp] }
            - { get_attr: [sg, node-secgrp] }
            - { get_attr: [sg, etcd-secgrp] }
          volume_size_host: { get_param: volume_size_host }
          volume_size_docker: { get_param: volume_size_docker }
          volume_size_local: { get_param: volume_size_local }
          volume_size_etcd: { get_param: volume_size_etcd }
{% if master_server_group_policies|length > 0 %}
          scheduler_hints:
            group: { get_resource: master_server_group }
{% endif %}
    depends_on:
      - network

  #######
  # - compute nodes (pods)
  #######
  compute_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: count_compute }
      removal_policies:
      - resource_list: []
      resource_def:
        type: server-node.yaml
        properties:
          name:
            str_replace:
              template: sub_type_k8s_type-%index%.internal.cluster_id
              params:
                cluster_id: { get_param: cluster_full_dns_domain }
                sub_type_k8s_type: app-node
          cluster_env: { get_param: cluster_public_dns_domain }
          cluster_id:  {{ stack_name }}
          group:
            str_replace:
              template: k8s_type.cluster_id
              params:
                k8s_type: nodes
                cluster_id: {{ stack_name }}
          type:        node
          subtype:     app
          node_labels:
            region: primary
          image:       { get_param: image_name }
          flavor:      { get_param: node_flavor }
          key_name:    { get_param: ssh_key_name }
          ssh_user:    { get_param: ssh_user }
          availability_zones: { get_param: availability_zones }
          index: "%index%"
          net:         { get_attr: [network, service_network] }
          subnet:      { get_attr: [network, service_subnet] }
          net_name:    { get_attr: [network, service_network_name] }
          secgrp:
            - { get_attr: [sg, node-secgrp] }
            - { get_attr: [sg, common-secgrp] }
          volume_size_host: { get_param: volume_size_host }
          volume_size_docker: { get_param: volume_size_docker }
          volume_size_local: { get_param: volume_size_local }
    depends_on:
      - network

  #######
  # - infrastructure nodes (openshift router)
  #######
  infra_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: count_infra }
      resource_def:
        type: server-infra-node.yaml
        properties:
          name:
            str_replace:
              template: sub_type_k8s_type-%index%.internal.cluster_id
              params:
                cluster_id: { get_param: cluster_full_dns_domain }
                sub_type_k8s_type: infra-node
          cluster_env: { get_param: cluster_public_dns_domain }
          cluster_id:  {{ stack_name }}
          group:
            str_replace:
              template: k8s_type.cluster_id
              params:
                k8s_type: infra
                cluster_id: {{ stack_name }}
          type:        node
          subtype:     infra
          node_labels:
            region: infra
          image:       { get_param: image_name }
          flavor:      { get_param: infra_flavor }
          key_name:    { get_param: ssh_key_name }
          ssh_user:    { get_param: ssh_user }
          availability_zones: { get_param: availability_zones }
          index: "%index%"
          net:         { get_attr: [network, service_network] }
          subnet:      { get_attr: [network, service_subnet] }
          net_name:    { get_attr: [network, service_network_name] }
          secgrp:
            - { get_attr: [sg, node-secgrp] }
            - { get_attr: [sg, common-secgrp] }
            - { get_attr: [sg, infra-secgrp] }
            - { get_attr: [sg, storage-secgrp] }
          volume_size_host: { get_param: volume_size_host }
          volume_size_docker: { get_param: volume_size_docker }
          volume_size_local: { get_param: volume_size_local }
          volume_size_glusterfs: 30
{% if infra_server_group_policies|length > 0 %}
          scheduler_hints:
            group: { get_resource: infra_server_group }
{% endif %}
    depends_on:
      - network

  #######
  # - Create the LoadBalancer and register hosts in the corresponding pools
  #######
  {% include 'lb.yaml.j2' %}

outputs:

  master_instances:
    description: Instances of the type Master
    value: { get_attr: [masters, entry] }

  compute_instances:
    description: Instances of the type Compute
    value: { get_attr: [compute_nodes, entry] }

  infra_instances:
    description: Instances of the type Infra
    value: { get_attr: [infra_nodes, entry] }

  lb_instances:
    description: LoadBalancer Instances
    value:
      - name:
          str_replace:
            template: lb-0.internal.cluster_id
            params:
              cluster_id: { get_param: cluster_full_dns_domain }
        host_type: lb
        host_subtype: lb
        address: { get_attr: [loadbalancer, vip_address] }
        group: lb.{{ stack_name }}
  #
  # lb_pool:
  #   value: { get_attr: [ loadbalancer, lb_pool_admin_8443 ] }

  # lb_ip:
  #   description: IP of the LB
  #   value: { get_attr: [ loadbalancer, vip_address ] }
