---
heat_template_version: 2016-10-14

description: OpenShift cluster

parameters:

  subnet_cidr:
    type: string
    description: CIDR of the subnetwork to place cluster
    default: 192.168.99.0/24

  dns_nameservers:
    type: comma_delimited_list
    description: Addresses of a dns nameserver reachable in your environment

  router_name:
    type: string
    description: >
      Name of the Router to which DNS subnet will be attached to
    constraints:
    - custom_constraint: neutron.router

  cloud_network:
    type: string
    description: >
      Name of the global network
    constraints:
    - custom_constraint: neutron.network

  cluster_name:
    type: string
    description: >
      Cluster name (used in resource names)
    default: oc.example.com

  cluster_public_domain:
    type: string
    description: >
      Cluster public domain
    default: openshift.oc.example.com

  image_name:
    type: string
    default: Fedora-Atomic-27-20180326

  node_flavor:
    type: string
    default: s2.large.2

  ssh_key_name:
    type: string
    description: Name of the SSH keypair registered with Nova
    constraints:
    - custom_constraint: nova.keypair

  volume_size_host:
    type: number
    description: Sys storage size of each node
    default: 6

  volume_size_local:
    type: number
    description: Volume size for the local Pod storage
    default: 10

  volume_size_docker:
    type: number
    description: Volume size for the local docker images storage
    default: 10

  volume_size_etcd:
    type: number
    description: Volume size for the local etcd storage
    default: 10

  volume_size_registry:
    type: number
    description: Volume size for the docker registry storage
    default: 10

  app_cluster_lb_name:
    type: string
    description: name of the LoadBalancer
    default: app-cluster-lb


  count_master:
    type: number
    default: 0
  count_compute:
    type: number
    default: 0
  count_etcd:
    type: number
    default: 0
  count_infra:
    type: number
    default: 0
  count_cns:
    type: number
    default: 0


resources:

  network:
    type: network.yaml
    properties:
      # service_network: {get_param: cloud_network}
      dns_nameservers: { get_param: dns_nameservers }
      service_router: { get_param: router_name }
      service_subnet_cidr: { get_param: subnet_cidr }
      cluster_name: { get_param: cluster_public_domain }

  sg:
    type: sec_grp.yaml
    properties:
      cluster_name: { get_param: cluster_public_domain }

  # pool_router_80:
  #   type: OS::Neutron::LBaaS::Pool
  #   properties:
  #     lb_algorithm: ROUND_ROBIN
  #     protocol: TCP
  #     listener: { get_resource: listener_router_80 }
  #
  # pool_router_443:
  #   type: OS::Neutron::LBaaS::Pool
  #   properties:
  #     lb_algorithm: ROUND_ROBIN
  #     protocol: TCP
  #     listener: { get_resource: listener_router_443 }
  #
  # pool_router_8443:
  #   type: OS::Neutron::LBaaS::Pool
  #   properties:
  #     lb_algorithm: ROUND_ROBIN
  #     protocol: TCP
  #     listener: { get_resource: listener_admin }
  #
  # listener_router_80:
  #   type: OS::Neutron::LBaaS::Listener
  #   properties:
  #     name: lsnr-router-80
  #     loadbalancer: { get_resource: loadbalancer }
  #     protocol: TCP
  #     protocol_port: 80
  #
  # listener_router_443:
  #   type: OS::Neutron::LBaaS::Listener
  #   properties:
  #     name: lsnr-router-443
  #     loadbalancer: { get_resource: loadbalancer }
  #     protocol: TCP
  #     protocol_port: 443
  #
  # listener_admin:
  #   type: OS::Neutron::LBaaS::Listener
  #   properties:
  #     name: lsnr-admin-8443
  #     loadbalancer: { get_resource: loadbalancer }
  #     protocol: TCP
  #     protocol_port: 8443
  #
  # loadbalancer:
  #   type: OS::Neutron::LBaaS::LoadBalancer
  #   properties:
  #     name: { get_param: app_cluster_lb_name }
  #     description: Master load-balancer
  #     vip_subnet: { get_attr: [network, service_subnet] }

#   etcd:
#     type: OS::Heat::ResourceGroup
#     properties:
#       count: { get_param: count_etcd }
#       resource_def:
#         type: server.yaml
#         properties:
#           name:
#             str_replace:
#               template: k8s_type-%index%.cluster_id
#               params:
#                 cluster_id: internal.oc.example.com
#                 k8s_type: etcd
#           cluster_env: oc.example.com
#           cluster_id:  openshift.oc.example.com
#           group:
#             str_replace:
#               template: k8s_type.cluster_id
#               params:
#                 k8s_type: etcds
#                 cluster_id: openshift.oc.example.com
#           type:        etcd
#           image:       { get_param: image_name }
#           flavor:      s2.large.2
#           key_name:    ag-KeyPair
#           net:         { get_resource: net }
#           subnet:      { get_resource: subnet }
#           net_name:
#             str_replace:
#               template: openshift-ansible-cluster_id-net
#               params:
#                 cluster_id: openshift.oc.example.com
#           secgrp:
#             - { get_resource: etcd-secgrp }
#             - { get_resource: common-secgrp }
#           attach_float_net: false
#           volume_size: 2
#     depends_on:
#       - interface
#
#
  masters:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: count_master }
      resource_def:
        type: server-master.yaml
        properties:
          name:
            str_replace:
              template: k8s_type-%index%.internal.cluster_id
              params:
                cluster_id: { get_param: cluster_name }
                k8s_type: master
          cluster_env: { get_param: cluster_public_domain }
          cluster_id:  { get_param: cluster_name }
          group:
            str_replace:
              template: k8s_type.cluster_id
              params:
                k8s_type: masters
                cluster_id: { get_param: cluster_name }
          type:        master
          image:       { get_param: image_name }
          flavor:      { get_param: node_flavor }
          key_name:    { get_param: ssh_key_name }
          net:         { get_attr: [network, service_network] }
          subnet:      { get_attr: [network, service_subnet] }
          net_name:    { get_attr: [network, service_network_name] }
          secgrp:
            - { get_attr: [sg, common-secgrp] }
            - { get_attr: [sg, master-secgrp] }
            - { get_attr: [sg, node-secgrp] }
            - { get_attr: [sg, etcd-secgrp] }
          volume_size_host: { get_param: volume_size_host }
          volume_size_docker: { get_param: volume_size_docker }
          volume_size_local: { get_param: volume_size_local }
          volume_size_etcd: { get_param: volume_size_etcd }
          # lb_pool: { get_resource: pool_router_8443 }
          # lb_port: 8443
    depends_on:
      - network

  compute_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: count_compute }
      removal_policies:
      - resource_list: []
      resource_def:
        type: server-node.yaml
        properties:
          name:
            str_replace:
              template: sub_type_k8s_type-%index%.internal.cluster_id
              params:
                cluster_id: { get_param: cluster_name }
                sub_type_k8s_type: app-node
          cluster_env: { get_param: cluster_public_domain }
          cluster_id:  { get_param: cluster_name }
          group:
            str_replace:
              template: k8s_type.cluster_id
              params:
                k8s_type: nodes
                cluster_id: { get_param: cluster_name }
          type:        node
          subtype:     app
          node_labels:
            region: primary
          image:       { get_param: image_name }
          flavor:      { get_param: node_flavor }
          key_name:    { get_param: ssh_key_name }
          net:         { get_attr: [network, service_network] }
          subnet:      { get_attr: [network, service_subnet] }
          net_name:    { get_attr: [network, service_network_name] }
          secgrp:
            - { get_attr: [sg, node-secgrp] }
            - { get_attr: [sg, common-secgrp] }
          volume_size_docker: { get_param: volume_size_docker }
          volume_size_local: { get_param: volume_size_local }
    depends_on:
      - network

  infra_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: count_infra }
      resource_def:
        type: server-infra-node.yaml
        properties:
          name:
            str_replace:
              template: sub_type_k8s_type-%index%.internal.cluster_id
              params:
                cluster_id: { get_param: cluster_name }
                sub_type_k8s_type: infra-node
          cluster_env: { get_param: cluster_public_domain }
          cluster_id:  { get_param: cluster_name }
          group:
            str_replace:
              template: k8s_type.cluster_id
              params:
                k8s_type: infra
                cluster_id: { get_param: cluster_name }
          type:        node
          subtype:     infra
          node_labels:
            region: infra
          image:       { get_param: image_name }
          flavor:      { get_param: node_flavor }
          key_name:    { get_param: ssh_key_name }
          net:         { get_attr: [network, service_network] }
          subnet:      { get_attr: [network, service_subnet] }
          net_name:    { get_attr: [network, service_network_name] }
          secgrp:
            - { get_attr: [sg, node-secgrp] }
            - { get_attr: [sg, common-secgrp] }
            - { get_attr: [sg, infra-secgrp] }
          volume_size_docker: { get_param: volume_size_docker }
          volume_size_local: { get_param: volume_size_local }
          # lb_pool_https: { get_resource: pool_router_443 }
          # lb_port_https: 443
          # lb_pool_http: { get_resource: pool_router_80 }
          # lb_port_http: 80
    depends_on:
      - network

  # reg_masters:
  #   type: OS::Heat::ResourceGroup
  #   properties:
  #     count: { get_param: count_infra }
  #     resource_def:
  #       type: server-lb_backend.yaml
  #       properties:
  #         # Note you have to pass the index and the entire list into the
  #         # nested template, resolving via %index% doesn't work directly
  #         # in the get_param here
  #         index: "%index%"
  #         servers: { get_attr: [ infra_nodes, private_ip ] }
  #         subnet:  { get_attr: [network, service_subnet] }
  #         lb_pool: { get_resource: pool_router_443 }
  #         lb_port: 443

outputs:

  # etcd_names:
  #   description: Name of the etcds
  #   value: { get_attr: [ etcd, name ] }
  #
  # etcd_ips:
  #   description: IPs of the etcds
  #   value: { get_attr: [ etcd, private_ip ] }
  #
  # etcd_floating_ips:
  #   description: Floating IPs of the etcds
  #   value: { get_attr: [ etcd, floating_ip ] }
  #
  master_names:
    description: Name of the masters
    value: { get_attr: [ masters, name ] }

  master_ips:
    description: IPs of the masters
    value: { get_attr: [ masters, private_ip ] }

  master_floating_ips:
    description: Floating IPs of the masters
    value: { get_attr: [ masters, floating_ip ] }

  node_names:
    description: Name of the app nodes
    value: { get_attr: [ compute_nodes, name ] }

  node_ips:
    description: IPs of the app nodes
    value: { get_attr: [ compute_nodes, private_ip ] }

  node_floating_ips:
    description: Floating IPs of the app nodes
    value: { get_attr: [ compute_nodes, floating_ip ] }

  infra_names:
    description: Name of the infra nodes
    value: { get_attr: [ infra_nodes, name ] }

  infra_ips:
    description: IPs of the infra nodes
    value: { get_attr: [ infra_nodes, private_ip ] }

  infra_floating_ips:
    description: Floating IPs of the infra nodes
    value: { get_attr: [ infra_nodes, floating_ip ] }

  # lb_ip:
  #   description: IP of the LB
  #   value: { get_attr: [ loadbalancer, vip_address ] }
